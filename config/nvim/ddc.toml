# AutoComplete plugin
[[plugins]]
repo = 'Shougo/ddc.vim'
# on_event = ['InsertEnter']
on_event = ['BufRead', 'CursorHold']
# on_event = ['BufEnter']
depends = ['denops.vim']
lua_source = '''
local ddc_custom_patch_global = vim.fn["ddc#custom#patch_global"]

local pum_map_select_relative = vim.fn["pum#map#select_relative"]
local pum_map_confirm = vim.fn["pum#map#confirm"]
local pum_map_cancel = vim.fn["pum#map#cancel"]
local pum_visible = vim.fn["pum#visible"]
local pum_entered = vim.fn["pum#entered"]

vim.fn["ddc#custom#load_config"](vim.fn.expand("~/.config/nvim/ddc.ts"))
vim.fn["ddc#enable"]({context_filetype = "treesitter"})

vim.api.nvim_create_autocmd("InsertEnter", {
	callback = function(event)
		vim.keymap.set({ "i", "s" }, "<Tab>", function()
			return vim.fn["vsnip#available"](1) == 1 and "<Plug>(vsnip-expand-or-jump)" or "<C-l>"
		end, { expr = true, noremap = false })

		vim.keymap.set({ "i", "s" }, "<C-k>", function()
			return vim.fn["vsnip#jumpable"](1) == 1 and "<Plug>(vsnip-jump-next)" or "<Tab>"
		end, { expr = true, noremap = false })

		vim.keymap.set({ "i", "s" }, "<C-j>", function()
			return vim.fn["vsnip#jumpable"](-1) == 1 and "<Plug>(vsnip-jump-prev)" or "<S-Tab>"
		end, { expr = true, noremap = false })

		vim.keymap.set({ "n", "s" }, "<s>", [[<Plug>(vsnip-select-text)]], { expr = true, noremap = false })
		vim.keymap.set({ "n", "s" }, "<S>", [[<Plug>(vsnip-cut-text)]], { expr = true, noremap = false })

		vim.keymap.set("i", "<C-p>", function()
			pum_map_select_relative(-1)
		end, {})

		vim.keymap.set("i", "<C-n>", function()
			pum_map_select_relative(1)
		end, {})

		vim.keymap.set("i", "<C-y>", function()
			return '<Cmd>call pum#map#confirm()<CR>'
		end, { expr = true, silent = true })

		vim.keymap.set("i", "<CR>", function()
			return pum_visible() and '<Cmd>call pum#map#confirm()<CR>' or '<CR>'
		end, { expr = true, silent = true })
	end
})
'''

# lua_source = """
# local fn = vim.fn
#
# local pum_map_select_relative = vim.fn["pum#map#select_relative"]
# local pum_visible = vim.fn["pum#visible"]
#
# vim.api.nvim_create_autocmd("InsertEnter", {
# 	callback = function(event)
# 		vim.keymap.set({ "i", "s" }, "<Tab>", function()
# 			return vim.fn["vsnip#available"](1) == 1 and "<Plug>(vsnip-expand-or-jump)" or "<C-l>"
# 		end, { expr = true, noremap = false })
#
# 		vim.keymap.set({ "i", "s" }, "<C-k>", function()
# 			return vim.fn["vsnip#jumpable"](1) == 1 and "<Plug>(vsnip-jump-next)" or "<Tab>"
# 		end, { expr = true, noremap = false })
#
# 		vim.keymap.set({ "i", "s" }, "<C-j>", function()
# 			return vim.fn["vsnip#jumpable"](-1) == 1 and "<Plug>(vsnip-jump-prev)" or "<S-Tab>"
# 		end, { expr = true, noremap = false })
#
# 		vim.keymap.set({ "n", "s" }, "<s>", [[<Plug>(vsnip-select-text)]], { expr = true, noremap = false })
# 		vim.keymap.set({ "n", "s" }, "<S>", [[<Plug>(vsnip-cut-text)]], { expr = true, noremap = false })
#
# 		vim.keymap.set("i", "<C-p>", function()
# 			pum_map_select_relative(-1)
# 		end, {})
#
# 		vim.keymap.set("i", "<C-n>", function()
# 			pum_map_select_relative(1)
# 		end, {})
#
# 		vim.keymap.set("i", "<C-y>", function()
# 			return '<Cmd>call pum#map#confirm()<CR>'
# 		end, { expr = true, silent = true })
#
# 		vim.keymap.set("i", "<CR>", function()
# 			return pum_visible() and '<Cmd>call pum#map#confirm()<CR>' or '<CR>'
# 		end, { expr = true, silent = true })
# 	end
# })
#
#
# fn["ddc#custom#load_config"](fn.expand("~/.config/nvim/ddc.ts"))
# fn["ddc#enable"]()
# fn["ddc#enable"]({context_filetype = "treesitter"})
# fn["ddc#enable_terminal_completion"]()
# """

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

# [[plugins]]
# repo = 'Shougo/ddc-ui-native'
# on_source = 'ddc.vim'

[[plugins]]
repo = "uga-rosa/ddc-source-vsnip"
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-sorter_head'
on_source = 'ddc.vim'

[[plugins]]
repo = "Shougo/ddc-source-lsp"
on_source = 'nvim-lspconfig'

[[plugins]]
repo = "uga-rosa/ddc-source-lsp-setup"
on_source = 'nvim-lspconfig'
# on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-signature_help'
# on_source = 'ddc.vim'
lua_source = '''
 vim.fn["signature_help#enable"]()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
" call popup_preview#enable()
'''

# [[plugins]]
# repo = 'tani/ddc-path'
# on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

# Snippet Engine
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
lua_source = """
vim.g.vsnip_filetypes = {
  javascriptreact = "javascript",
  typescriptreact = "typescript",
}

vim.g.vsnip_snippet_dirs = {
  -- vim.fn.expand("~/.cache/dpp/repos/github.com/rafamadriz/friendly-snippets/snippets"),
  vim.fn.expand("~/.vsnip/snippets")
}
"""

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-matcher_fuzzy'
on_source = 'ddc.vim'


[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
on_source = 'ddc.vim'

[[plugins]]
repo = 'uga-rosa/denippet.vim'
on_source = 'ddc.vim'

# SKK
[[plugins]]
repo = "vim-skk/skkeleton"
on_source = 'ddc.vim'
hook_source = '''
call skkeleton#azik#add_table("jis")

call skkeleton#config(#{
\   globalDictionaries: [ "~/.skk-dict/SKK-JISYO.L", "~/.skk-dict/SKK-JISYO.im@sparql.all.utf8" ],
\   databasePath: "~/.vim/skk/database",
\   kanaTable: "azik"
\   })


call skkeleton#register_keymap('henkan', "<", 'purgeCandidate')
call skkeleton#register_keymap('henkan', "X", '')

call skkeleton#register_keymap('henkan', "<S-q>", 'purgeCandidate')
call skkeleton#register_keymap('henkan', "X", '')

call skkeleton#register_keymap('input', ';', 'henkanPoint')


autocmd InsertEnter * ++once call skkeleton#register_kanatable('azik', {
    \   'jj':       'escape',
    \   '@':        'katakana',
    \   '<s-j><s-j>': ['じゅん', ''],
    \   '<s-j>i':     ['じ', ''],
    \   '<s-j>p':     ['じょう', ''],
    \   '<s-j>o':     ['じょ', ''],
    \   '<s-j>k':     ['じん', ''],
    \   '<s-j>u':     ['じゅ', ''],
    \   'l':          ['っ', ''],
    \   'la':         ['', ''],
    \   'li':         ['', ''],
    \   'lu':         ['', ''],
    \   'le':         ['', ''],
    \   'lo':         ['', ''],
    \   'xxa':        ['ぁ', ''],
    \   'xxi':        ['ぃ', ''],
    \   'xxu':        ['ぅ', ''],
    \   'xxe':        ['ぇ', ''],
    \   'xxo':        ['ぉ', ''],
    \   'n':          ['ん', ''],
    \   'z=':         ['＝', ''],
    \   'z~':         ['～', ''],
    \   'z ':         ['　', ''],
    \   'z:':         ['：', ''],
    \ })


imap <C-i> <Plug>(skkeleton-enable)
imap <C-l> <Plug>(skkeleton-disable)
'''

[[plugins]]
repo = 'NI57721/skkeleton-azik-kanatable'
on_source = 'skkeleton'

[[plugins]]
repo = "gamoutatsumi/ddc-emoji"
on_source = 'skkeleton'

[[plugins]]
repo = "andymass/vim-matchup"
on_source = ""

[[plugins]]
repo = 'matsui54/ddc-source-dictionary'
on_source = 'ddc.vim'
hook_source = '''
call ddc#custom#patch_global('sourceParams', {
      \ 'dictionary': { 'dictPaths': [
      \  expand("~/.spell-dict/programming-english-dict"),
      \  expand("~/.spell-dict/dict.txt"),
      \  ],
      \ 'smartCase': v:true,
      \ 'isVolatile': v:true,
      \ }
      \ })

call ddc#custom#patch_global('sources', ['dictionary'])
call ddc#custom#patch_global('sourceOptions', {
      \ '_': {'matchers': ['matcher_head']},
      \ 'dictionary': {'mark': 'D'},
      \ })
'''
