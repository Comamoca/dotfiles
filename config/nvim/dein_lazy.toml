[[plugins]]
repo= 'https://github.com/lilydjwg/colorizer'
on_event = ["BufRead"]

[[plugins]]
repo = 'https://github.com/nvim-lualine/lualine.nvim'
on_event = ["VimEnter"]
lua_source = """
require("configs/lualine")
"""

[[plugins]]
on_event = ["InsertEnter"]
repo = 'jose-elias-alvarez/null-ls.nvim'
lua_source = """
require("configs/null-ls")
"""

[[plugins]]
repo = 'https://github.com/jay-babu/mason-null-ls.nvim'
on_source = ["null-ls.nvim"]

[[plugins]]
repo = "https://github.com/segeljakt/vim-silicon"
on_cmd = ["Silicon"]
lua_source = """
require("configs/silicon")
"""

[[plugins]]
repo = "https://github.com/mattn/vim-chatgpt"
on_cmd = ["chatgpt", "codereviewplease"]

[[plugins]]
repo = "https://github.com/lambdalisue/kensaku-command.vim"
on_cmd = ["Kensaku"]

[[plugins]]
repo = 'https://github.com/mhanberg/elixir.nvim'
on_ft = ["elixir"]
lua_source = """
-- require("elixir").setup({
--   cmd = "/home/coma/ghq/github.com/elixir-lsp/elixir-ls/release/language_server.sh",
-- })
"""

[[plugins]]
repo = 'https://github.com/elixir-editors/vim-elixir'
on_ft = ["elixir"]

[[plugins]]
repo = 'https://github.com/akinsho/flutter-tools.nvim'
on_ft = ["dart"]
lua_source = """
require("flutter-tools").setup{}
"""

[[plugins]]
repo = 'skanehira/command.vim'
on_cmd = ["CommandBufferOpen"]

[[plugins]]
repo ='p00f/nvim-ts-rainbow'
on_event = ["VimEnter"]

[[plugins]]
repo = 'tpope/vim-commentary'
on_event = ["VimEnter"]

[[plugins]]
repo= 'folke/noice.nvim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
on_event = ["VimEnter"]

# カラースチーム
[[plugins]]
repo = 'sainnhe/everforest'
on_func = ['colorscheme']

[[plugins]]
repo = 'folke/tokyonight.nvim'
on_func = ['colorscheme']

[[plugins]]
repo = 'bfredl/nvim-luadev'
on_cmd = ['Luadev']

# 使用頻度が低いプラグイン
# 毎回使わないようなプラグインはここ
[[plugins]]
repo = 'sakhnik/nvim-gdb'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'itchyny/calendar.vim'

[[plugins]]
repo = 'skanehira/translate.vim'
on_event = ['VimEnter']

# マークダウン

[[plugins]]
repo = 'previm/previm'
on_cmd = ['PrevimOpen']

[[plugins]]
repo = 'skanehira/preview-markdown.vim'

[[plugins]]
repo = 'tpope/vim-markdown'

[[plugins]]
repo = 'tyru/open-browser.vim'



# ファイル固有
# on_ft推奨

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'

[[plugins]]
repo = 'integralist/vim-mypy'

[[plugins]]
repo = 'habamax/vim-rst'
on_ft = ["rst"]


[[plugins]]
repo = 'glench/vim-jinja2-syntax'

[[plugins]]
repo = 'dag/vim-fish'
on_ft = ["fish"]

[[plugins]]
repo = 'https://github.com/gleam-lang/gleam.vim'
on_ft = ["gleam"]

[[plugins]]
repo = 'hisaknown/nanomap.vim'

[[plugins]]
repo = "peterhoeg/vim-qml"
on_ft = ["qml"]

[[plugins]]
repo = "mattn/emmet-vim"
on_ft = ["html"]

[[plugins]]
repo = 'alvan/vim-closetag'
on_event = ['VimEnter']

[[plugins]]
repo = 'skanehira/vsession'
on_cmd = ['SaveSession', 'LoadSession', 'DeleteSession']

[[plugins]]
repo = 'alaviss/nim.nvim'
on_ft = ['nim', 'nims', 'nimble']

[[plugins]]
repo = 'twitvim/twitvim'
on_cmd = [
  "FriendsTwitter"
  "PostToTwitter"
  ]

[[plugins]]
repo = 'kdheepak/lazygit.nvim'
on_cmd = ["LazyGit", "LazyGitConfig", "LazyGitFilter", "LazyGitFilterCurrentFile"]

[[plugins]]
repo = 'https://github.com/Shougo/deol.nvim'
on_cmd = ["Deol"]

[[plugins]]
repo = "evanleck/vim-svelte"
on_ft = ["svelte"]

[[plugins]]
repo = "https://github.com/azadkuh/vim-cmus"
on_cmd = ["Cmus", "CmusCurrent", "CmusPrevious", "CmusPlay", "CmusPause", "CmusStop", "CmusNext"]

[[plugins]]
repo = "https://github.com/ErichDonGubler/vim-nushell"
on_ft = ["nushell"]


[[plugins]]
repo = 'nvim-telescope/telescope-file-browser.nvim'
# on_event = ["VimEnter"]
on_source = ["telescope.nvim"]

[[plugins]]
repo = 'https://github.com/Allianaab2m/telescope-kensaku.nvim'
on_source = ["telescope.nvim"]

[[plugins]]
repo ='nvim-telescope/telescope.nvim'
on_cmd = ["Telescope"]
# on_source = ["telescope-file-browser.nvim"]
lua_source = """
-- To get telescope-file-browser loaded and working with telescope,
-- you need to call load_extension, somewhere after setup function:
require("telescope").load_extension("file_browser")
require("telescope").load_extension("kensaku")

require("telescope").setup({
		extensions = {
			file_browser = {
				-- theme = "ivy",
				-- disables netrw and use telescope-file-browser in its place
				hijack_netrw = true,
				mappings = {
					["i"] = {
						-- your custom insert mode mappings
					},
					["n"] = {
						-- your custom normal mode mappings
					},
				},
			},
		},
	})
"""

# nvim-cmp
[[plugins]]
repo = "hrsh7th/nvim-cmp"
on_event = ["BufRead"]
lua_source = """
require("cmp_nvim_ultisnips").setup({})
local cmp_ultisnips_mappings = require("cmp_nvim_ultisnips.mappings")
local cmp = require("cmp")
local lspkind = require("lspkind")

cmp.setup({
	snippet = {
		expand = function(args)
			vim.fn["UltiSnips#Anon"](args.body)
		end,
	},
	sources = {
		{ name = "nvim_lsp" },
		{ name = "skkeleton" },
		{ name = "path" },
		-- { name = "buffer" },
	},
	mapping = cmp.mapping.preset.insert({
		["<C-p>"] = cmp.mapping.select_prev_item(),
		["<C-n>"] = cmp.mapping.select_next_item(),
		["<C-l>"] = cmp.mapping.complete(),
		["<C-e>"] = cmp.mapping.abort(),
		["<CR>"] = cmp.mapping.confirm({
			select = true,
		}),
		["<Tab>"] = cmp.mapping(function(fallback)
			cmp_ultisnips_mappings.expand_or_jump_forwards(fallback)
		end, {
			"i",
			"s", --[[ "c" (to enable the mapping in command mode) ]]
		}),
		["<S-Tab>"] = cmp.mapping(function(fallback)
			cmp_ultisnips_mappings.jump_backwards(fallback)
		end, {
			"i",
			"s", --[[ "c" (to enable the mapping in command mode) ]]
		}),
	}),
	formatting = {
		format = lspkind.cmp_format({
			mode = "symbol", -- show only symbol annotations
			maxwidth = 60, -- prevent the popup from showing more than provided characters (e.g 50 will not show more than 50 characters)
			ellipsis_char = "...", -- when popup menu exceed maxwidth, the truncated part would show ellipsis_char instead (must define maxwidth first)
			-- The function below will be called before any actual modifications from lspkind
			-- so that you can provide more controls on popup customization. (See [#30](https://github.com/onsails/lspkind-nvim/pull/30))
		}),
	},
	experimental = {
		ghost_text = true,
	},
	view = {
		entries = "native",
	},
})
"""

[[plugins]]
repo = 'hrsh7th/cmp-buffer'
on_source = ["nvim-cmp"]

[[plugins]]
repo = 'hrsh7th/cmp-path'
on_source = ["nvim-cmp"]

[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
on_source = ["nvim-cmp"]

[[plugins]]
repo = 'quangnguyen30192/cmp-nvim-ultisnips'
on_source = ["nvim-cmp"]

[[plugins]]
repo = 'rinx/cmp-skkeleton'
on_source = ["nvim-cmp"]

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = ["nvim-cmp"]
lua_source = """
require("mason").setup()
local nvim_lsp = require("lspconfig")

nvim_lsp.dartls.setup({})

local node_root_dir = nvim_lsp.util.root_pattern("package.json")
local is_node_repo = node_root_dir(vim.api.nvim_buf_get_name(0)) ~= nil

local opts = {}

if is_node_repo then
	nvim_lsp["tsserver"].setup({
		root_dir = nvim_lsp.util.root_pattern("package.json"),
	})
else
	nvim_lsp["denols"].setup({
		root_dir = nvim_lsp.util.root_pattern("deno.json"),
		init_options = {
			lint = true,
			unstable = true,
			suggest = {
				imports = {
					hosts = {
						["https://deno.land"] = true,
						["https://cdn.nest.land"] = true,
						["https://crux.land"] = true,
					},
				},
			},
		},
	})
end

require("mason-lspconfig").setup_handlers({
	function(server)
		local opt = {
			capabilities = require("cmp_nvim_lsp").default_capabilities(vim.lsp.protocol.make_client_capabilities()),
		}
		require("lspconfig")[server].setup(opt)

		local node_root_dir = nvim_lsp.util.root_pattern("package.json")
		local is_node_repo = node_root_dir(vim.api.nvim_buf_get_name(0)) ~= nil

		if server == "elixirls" then
			require("lspconfig").elixirls.setup({
				-- Unix
				cmd = { "/home/coma/.local/share/nvim/mason/bin/elixir-ls" },
			})
		elseif server == "tsserver" then
			return
		elseif server == "denols" then
			return
		elseif server == "lua-language-server" then
			require("lspconfig").sumneko_lua.setup({
				settings = {
					Lua = {
						runtime = { version = "LuaJIT", path = vim.split(package.path, ";") },
						diagnostics = {
							-- Get the language server to recognize the `vim` global
							enable = true,
							globals = { "vim" },
						},
					},
				},
			})
		end
	end,
})

-- keyboard shortcut
vim.keymap.set("n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>")
vim.keymap.set("n", "gf", "<cmd>lua vim.lsp.buf.formatting()<CR>")
vim.keymap.set("n", "gr", "<cmd>lua vim.lsp.buf.references()<CR>")
vim.keymap.set("n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>")
vim.keymap.set("n", "gD", "<cmd>lua vim.lsp.buf.declaration()<CR>")
vim.keymap.set("n", "gi", "<cmd>lua vim.lsp.buf.implementation()<CR>")
vim.keymap.set("n", "gt", "<cmd>lua vim.lsp.buf.type_definition()<CR>")
vim.keymap.set("n", "gn", "<cmd>lua vim.lsp.buf.rename()<CR>")
vim.keymap.set("n", "ga", "<cmd>lua vim.lsp.buf.code_action()<CR>")
vim.keymap.set("n", "ge", "<cmd>lua vim.diagnostic.open_float()<CR>")
vim.keymap.set("n", "g]", "<cmd>lua vim.diagnostic.goto_next()<CR>")
vim.keymap.set("n", "g[", "<cmd>lua vim.diagnostic.goto_prev()<CR>")

-- LSP handlers
vim.lsp.handlers["textDocument/publishDiagnostics"] =
    vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, { virtual_text = true })

-- vim.cmd([[
-- highlight LspDiagnosticsSignError ctermbg=9 ctermfg=15
-- highlight LspDiagnosticsSignHint ctermbg=142 ctermfg=15
-- ]])
"""

[[plugins]]
<<<<<<< HEAD
repo= 'onsails/lspkind.nvim'
on_source = ["nvim-cmp"]
lua_source = """
require("configs/lspkind")
"""

[[plugins]]
repo= 'folke/neodev.nvim'
on_source = ["nvim-cmp"]
lua_source = """
-- IMPORTANT: make sure to setup neodev BEFORE lspconfig
require("neodev").setup({
  -- add any options here, or leave empty to use the default settings
})

-- then setup your lsp server as usual
local lspconfig = require('lspconfig')

-- example to setup lua_ls and enable call snippets
lspconfig.lua_ls.setup({
  settings = {
    Lua = {
      completion = {
        callSnippet = "Replace"
      }
    }
  }
})
"""

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = ["nvim-cmp"]

[[plugins]]
repo= 'williamboman/mason-lspconfig.nvim'
on_source = ["nvim-lspconfig"]
=======
repo = 'Shougo/ddu-kind-file'
on_source = ["ddu.vim"]

>>>>>>> 9671ff90a2750532256d277499aa52434a46bcb8
