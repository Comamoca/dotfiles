[[plugins]]
repo = 'vim-denops/denops.vim'
on_event = ['BufRead', 'CursorHold']

[[plugins]]
repo = "vim-denops/denops-shared-server.vim"
on_func = [ 'denops_shared_server#install', 'denops_shared_server#uninstall']

[[plugins]]
repo = "lambdalisue/fern.vim"
on_cmd = ["Fern"]
lua_source = """
vim.keymap.set('n', '<leader>f', "<cmd>Fern . -reveal=% -drawer -toggle -width=40<CR>")
"""

[[plugins]]
repo = "dstein64/vim-startuptime"
on_cmd = ["StartupTime"]

[[plugins]]
repo = "mhinz/vim-sayonara"
on_cmd = ["Sayonara"]

[[plugins]]
repo = "hrsh7th/nvim-insx"
on_event = ['InsertEnter']
lua_source = """
require('insx.preset.standard').setup()
"""

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
# on_event = ['BufEnter']
on_event = ['BufRead', 'CursorHold']
hook_post_update = 'TSUpdate'
lua_source = """
    -- require("configs/tree-sitter")

    require("nvim-treesitter.configs").setup({
      ensure_installed = { "c", "lua", "vim", "vimdoc", "query" },
      sync_install = false,
      auto_install = true,
      ignore_install = { "javascript" },

      textobjects = {
        select = {
          enable = true,
          lookahead = true,
          keymaps = {
            ["af"] = "@function.outer",
            ["if"] = "@function.inner",
            ["ac"] = "@class.outer",
            ["ic"] = "@class.inner",
          },
        },
      },

      highlight = {
        enable = true,

        -- disable highlight in big file
        disable = function(lang, buf)
          local max_filesize = 100 * 1024 -- 100 KB
          local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
          if ok and stats and stats.size > max_filesize then
            return true
          end
        end,

        additional_vim_regex_highlighting = false,
      },
      autotag = {
        enable = true,
      },
    })
"""

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
on_source = ["nvim-treesitter"]

[[plugins]]
repo = 'nvim-treesitter/playground'
on_source = ["nvim-treesitter"]

[[plugins]]
repo = 'phaazon/hop.nvim'
# on_event = ['BufEnter']
on_event = ['BufRead', 'CursorHold']
lua_source = """
    -- vim.keymap.set("n", "<leader>k", "<Cmd>")
    -- vim.keymap.set("n", "<leader>l", "<Cmd>")
    -- vim.keymap.set("n", "<leader>w", "<Cmd>")
"""

[[plugins]]
repo = "numToStr/Comment.nvim"
# on_event = ['BufEnter']
on_event = ['BufRead', 'CursorHold']
lua_source = """
require('Comment').setup()
"""

[[plugins]]
repo = "yuttie/comfortable-motion.vim"
# on_event = ['BufEnter']
on_event = ['BufRead', 'CursorHold']

# [[plugins]]
# repo = 'stevearc/conform.nvim'
# on_event = ['BufEnter']

[[plugins]]
repo = 'stevearc/oil.nvim'
lua_source = "require(\"oil\").setup()\n"
on_cmd = ["Oil"]
on_event = ['BufRead', 'CursorHold']

# color theme
# [[plugins]]
# repo = "sainnhe/gruvbox-material"
# on_event = ['BufRead', 'CursorHold']

[[plugins]]
repo = 'VDuchauffour/neodark.nvim'
on_event = ['BufRead', 'CursorHold']

[[plugins]]
repo = "miyakogi/seiya.vim"
# on_event = ['BufRead', 'CursorHold']
on_event = ["ColorSchemePre", 'BufRead', 'CursorHold']
on_cmd = ["SeiyaEnable"]
lua_source = """
vim.cmd("let g:seiya_target_groups = has('nvim') ? ['guibg'] : ['ctermbhhg']")
-- vim.g.seiya_auto_enable = 1
-- vim.cmd("SeiyaEnable")
"""

# [[plugins]]
# repo = "Shougo/context_filetype.vim"
# on_event = ['BufRead', 'CursorHold', "BufReadPre"]

[[plugins]]
repo = "wakatime/vim-wakatime"
on_event = ['BufRead', 'CursorHold', "BufReadPre"]

[[plugins]]
repo = 'thinca/vim-partedit'
on_cmd = 'Partedit'
hook_add = '''
    let g:partedit#prefix_pattern = '\s*'
    let g:partedit#auto_prefix = 0
'''


[[plugins]]
repo = 'monaqa/nvim-treesitter-clipping'
depends = ['nvim-treesitter', 'vim-partedit']
on_lua = 'nvim-treesitter-clipping'
lua_add = '''
    vim.api.nvim_create_autocmd("FileType", {
      pattern = { "toml", "markdown" },
      callback = function()
        vim.keymap.set("n", "<C-p>", function()
          require("nvim-treesitter-clipping.internal").clip()
          vim.keymap.set("n", "Q", "<Cmd>w<CR><Cmd>ParteditEnd<CR>", { buffer = true })
        end, { buffer = true })
      end,
    })


'''

[[plugins]]
repo = 'stevearc/conform.nvim'
on_event = ['BufRead', 'CursorHold']
lua_source = """
    local conform = require("conform")

    conform.formatters.stylua = {
      prepend_args = { "--indent-type", "Spaces", "--indent-width", "2" },
    }

    conform.setup({
      formatters_by_ft = {
        lua = {
          "stylua",
        },
        python = { "black", "isort" },
        javascript = {
          "deno_fmt",
        },
        typescript = {
          "deno_fmt",
        },
        typescriptreact = {
          "deno_fmt",
        },
        javascriptreact = {
          "deno_fmt",
        },
      },
    })

    vim.api.nvim_create_autocmd("BufWritePre", {
      pattern = "*",
      callback = function(args)
        require("conform").format({ bufnr = args.buf })
      end,
    })

    vim.api.nvim_create_user_command("Format", function(args)
      local range = nil
      if args.count ~= -1 then
        local end_line = vim.api.nvim_buf_get_lines(0, args.line2 - 1, args.line2, true)[1]
        range = {
          start = { args.line1, 0 },
          ["end"] = { args.line2, end_line:len() },
        }
      end
      require("conform").format({ async = true, lsp_fallback = true, range = range })
    end, { range = true })
"""

[[plugins]]
repo = 'windwp/nvim-ts-autotag'
on_source = ["nvim-treesitter"]

[[plugins]]
repo = 'folke/zen-mode.nvim'
on_cmd = ["ZenMode"]
lua_source = """
    require("zen-mode").setup(
    {
      window = {
        backdrop = 0.95,
 width = 120,
        height = 1,
        options = {},
      },
      plugins = {
        options = {
          enabled = true,
          ruler = true,
          showcmd = false,
          laststatus = 0,
        },
        wezterm = {
          enabled = false,
          font = "+4",
        },
      },
      on_open = function(win)
      end,
      on_close = function()
      end,
    })
"""
