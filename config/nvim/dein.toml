# # {{{
# [[plugins]]
# repo = 'neoclide/coc.nvim'
# source = 'release'
# build = 'coc#util#install()'
# hook_add = """
# " Some servers have issues with backup files, see #649.
# set nobackup
# set nowritebackup
#
# " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
# " delays and poor user experience.
# set updatetime=300
#
# " Always show the signcolumn, otherwise it would shift the text each time
# " diagnostics appear/become resolved.
# set signcolumn=yes
#
# " Use tab for trigger completion with characters ahead and navigate.
# " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
# " other plugin before putting this into your config.
#
# inoremap <silent><expr> <TAB>
#       \ coc#pum#visible() ? coc#pum#next(1):
#       \ CheckBackspace() ? "\<Tab>" :
#       \ coc#refresh()
# inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
#
# " Make <CR> to accept selected completion item or notify coc.nvim to format
# " <C-g>u breaks current undo, please make your own choice.
# inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
#                               \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
#
# function! CheckBackspace() abort
#   let col = col('.') - 1
#   return !col || getline('.')[col - 1]  =~# '\s'
# endfunction
#
# " Use <c-space> to trigger completion.
# if has('nvim')
#   inoremap <silent><expr> <c-space> coc#refresh()
# else
#   inoremap <silent><expr> <c-@> coc#refresh()
# endif
#
# " Use `[g` and `]g` to navigate diagnostics
# " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
# nmap <silent> [g <Plug>(coc-diagnostic-prev)
# nmap <silent> ]g <Plug>(coc-diagnostic-next)
#
# " GoTo code navigation.
# nmap <silent> gd <Plug>(coc-definition)
# nmap <silent> gy <Plug>(coc-type-definition)
# nmap <silent> gi <Plug>(coc-implementation)
# nmap <silent> gr <Plug>(coc-references)
#
# " Use K to show documentation in preview window.
# nnoremap <silent> K :call ShowDocumentation()<CR>
#
# function! ShowDocumentation()
#   if CocAction('hasProvider', 'hover')
#     call CocActionAsync('doHover')
#   else
#     call feedkeys('K', 'in')
#   endif
# endfunction
#
# " Highlight the symbol and its references when holding the cursor.
# autocmd CursorHold * silent call CocActionAsync('highlight')
#
# " Symbol renaming.
# nmap <leader>rn <Plug>(coc-rename)
#
# " Formatting selected code.
# xmap <leader>f  <Plug>(coc-format-selected)
# nmap <leader>f  <Plug>(coc-format-selected)
#
# augroup mygroup
#   autocmd!
#   " Setup formatexpr specified filetype(s).
#   autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
#   " Update signature help on jump placeholder.
#   autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
# augroup end
#
# " Applying codeAction to the selected region.
# " Example: `<leader>aap` for current paragraph
# xmap <leader>a  <Plug>(coc-codeaction-selected)
# nmap <leader>a  <Plug>(coc-codeaction-selected)
#
# " Remap keys for applying codeAction to the current buffer.
# nmap <leader>ac  <Plug>(coc-codeaction)
# " Apply AutoFix to problem on the current line.
# nmap <leader>qf  <Plug>(coc-fix-current)
#
# " Run the Code Lens action on the current line.
# nmap <leader>cl  <Plug>(coc-codelens-action)
#
# " Map function and class text objects
# " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
# xmap if <Plug>(coc-funcobj-i)
# omap if <Plug>(coc-funcobj-i)
# xmap af <Plug>(coc-funcobj-a)
# omap af <Plug>(coc-funcobj-a)
# xmap ic <Plug>(coc-classobj-i)
# omap ic <Plug>(coc-classobj-i)
# xmap ac <Plug>(coc-classobj-a)
# omap ac <Plug>(coc-classobj-a)
#
# " Remap <C-f> and <C-b> for scroll float windows/popups.
# if has('nvim-0.4.0') || has('patch-8.2.0750')
#   nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
#   nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
#   inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
#   inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
#   vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
#   vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
# endif
#
# " Use CTRL-S for selections ranges.
# " Requires 'textDocument/selectionRange' support of language server.
# nmap <silent> <C-s> <Plug>(coc-range-select)
# xmap <silent> <C-s> <Plug>(coc-range-select)
#
# " Add `:Format` command to format current buffer.
# command! -nargs=0 Format :call CocActionAsync('format')
#
# " Add `:Fold` command to fold current buffer.
# command! -nargs=? Fold :call     CocAction('fold', <f-args>)
#
# " Add `:OR` command for organize imports of the current buffer.
# command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')
#
# " Add (Neo)Vim's native statusline support.
# " NOTE: Please see `:h coc-status` for integrations with external plugins that
# " provide custom statusline: lightline.vim, vim-airline.
# set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
#
# " Mappings for CoCList
# " Show all diagnostics.
# nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
# " Manage extensions.
# nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
# " Show commands.
# nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
# " Find symbol of current document.
# nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
# " Search workspace symbols.
# nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
# " Do default action for next item.
# nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
# " Do default action for previous item.
# nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
# " Resume latest coc list.
# nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
# """
# # }}}

[[plugins]]
repo = 'lambdalisue/gin.vim'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'SirVer/ultisnips'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-ultisnips.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-emoji.vim'

[[plugins]]
repo = "prabirshrestha/asyncomplete-file.vim"

# [[plugins]]
# repo = 'quangnguyen30191/cmp-nvim-ultisnips'

# [[plugins]]
# repo = 'rafamadriz/friendly-snippets'

# [[plugins]]
# repo = 'neovim/nvim-lspconfig'

# [[plugins]]
# repo = 'williamboman/mason.nvim'
# hook_add = """
# source /home/coma/.config/nvim/configs/mason.vim
# """

# [[plugins]]
# repo= 'williamboman/mason-lspconfig.nvim'

# [[plugins]]
# repo = "hrsh7th/nvim-cmp"
#
# [[plugins]]
# repo = 'dmitmel/cmp-vim-lsp'

# [[plugins]]
# repo = "hrsh7th/cmp-nvim-lsp"

# [[plugins]]
# repo = 'hrsh7th/cmp-buffer'
#
# [[plugins]]
# repo = 'hrsh7th/cmp-path'
#
# [[plugins]]
# repo = 'hrsh7th/cmp-cmdline'

[[plugins]]
repo ='echasnovski/mini.nvim'
rev = 'stable'

[[plugins]]
repo = 'sainnhe/gruvbox-material'

[[plugins]]
repo = 'miyakogi/seiya.vim'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo ='dense-analysis/ale'

[[plugins]]
repo ='Shougo/deol.nvim'

[[plugins]]
repo ='morhetz/gruvbox'

[[plugins]]
repo ='yuttie/comfortable-motion.vim'

[[plugins]]
repo ='lewis6991/gitsigns.nvim'

[[plugins]]
repo ='p00f/nvim-ts-rainbow'

[[plugins]]
repo ='mattn/vim-molder'

[[plugins]]
repo ='vim-skk/eskk.vim'

[[plugins]]
repo ='kana/vim-smartword'

[[plugins]]
repo ='vim-jp/vimdoc-ja'

[[plugins]]
repo ='simeji/winresizer'

[[plugins]]
repo ='nvim-treesitter/nvim-treesitter'

# [[plugins]]
# repo ='easymotion/vim-easymotion'
# hook_add = """
# let path = expand("~/.config/nvim/configs/easymoation.vim")
# execute "source" path
# """

[[plugins]]
repo ='nvim-telescope/telescope.nvim'

[[plugins]]
repo ='nvim-lua/plenary.nvim'

[[plugins]]
repo ='nathanaelkane/vim-indent-guides'

[[plugins]]
repo ='vim-denops/denops.vim'
# hook_add = """
# """

[[plugins]]
repo ='Shougo/ddu.vim'

[[plugins]]
repo ='Shougo/ddu-ui-ff'

[[plugins]]
repo ='yuki-yano/ddu-filter-fzf'

[[plugins]]
repo ='Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo ='liquidz/ddu-source-custom-list'

[[plugins]]
repo ='Shougo/ddu-source-file_rec'

[[plugins]]
repo ='Shougo/ddu-source-file'

[[plugins]]
repo ='shun/ddu-source-rg'

[[plugins]]
repo ='shun/ddu-source-buffer'

[[plugins]]
repo ='Shougo/ddu-source-line'

[[plugins]]
repo ='Shougo/ddu-kind-file'

[[plugins]]
repo ='Shougo/ddu-commands.vim'

[[plugins]]
repo = 'wakatime/vim-wakatime'

[[plugins]]
repo = 'statiolake/vim-quickrun-runner-nvimterm'

[[plugins]]
repo = 'thinca/vim-quickrun'
# on_cmd = ['Quickrun']
hook_add = """
let path = expand("~/.config/nvim/configs/quickrun.vim")
execute "source" path
"""

[[plugins]]
repo = 'sebdah/vim-delve'

[[plugins]]
repo = 'rlane/pounce.nvim'
hook_add = """
nnoremap s :<c-u>Pounce<CR>

lua << EOF
require'pounce'.setup{
  accept_keys = "JFKDLSAHGNUVRBYTMICEOXWPQZ",
  accept_best_key = "<enter>",
  multi_window = true,
  debug = false,
}
EOF
"""

[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'mattn/vim-lsp-settings'

# # ddc.vim
# [[plugins]]
# repo = 'Shougo/ddc.vim'
#
# [[plugins]]
# repo = 'Shougo/pum.vim'
#
# [[plugins]]
# repo = 'shun/ddc-vim-lsp'
#
# [[plugins]]
# repo = "Shougo/ddc-around"
#
# [[plugins]]
# repo = "Shougo/ddc-matcher_head"
#
# [[plugins]]
# repo = "Shougo/ddc-sorter_rank"
#
# [[plugins]]
# repo = "matsui54/ddc-ultisnips"
#
# [[plugins]]
# repo = "mattn/emoji-vim"

[[plugins]]
repo = "zah/nim.vim"
# on_ft = ['nim', 'nims', 'nimble']
